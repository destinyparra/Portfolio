

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\
  # CUSTOM PROPERTIES
\*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

:root is a special selector in CSS.
It is used to target the highest-level parent element in the document tree, which is the <html> element in an HTML document.


What are CSS Custom Properties?
CSS custom properties (variables) allow you to store values in one place and reuse them throughout your stylesheet. They help improve code maintainability, readability, and consistency. Custom properties are defined using the -- prefix and are accessed using the var() function.

Why Use Custom Properties?
Reusability: Define a value once and reuse it multiple times.
Consistency: Ensure the same value is used throughout your stylesheet.
Maintainability: Easily update a value in one place instead of searching and replacing throughout the stylesheet.
Dynamic Styling: Custom properties can be dynamically updated using JavaScript or CSS.


  /*-=-=-=-=-=-*\
   custom colors
  \*-=-=-=-=-=-*/
  Colors: Custom color variables using HSLA values.

--raisin-black, --roman-silver, etc., define shades of black, silver, and white


  /*-=-=-=-=-=-*\
     typography
  \*-=-=-=-=-=-*/

Typography: Custom font family, font sizes, and font weights.
--ff-syne sets the font family to 'Syne', sans-serif.
--fs-1 to --fs-8 define various font sizes.
--fw-800 and --fw-700 define font weights.


  /*-=-=-=-=-=-*\
      spacing
  \*-=-=-=-=-=-*/


Spacing: Custom spacing values.
  
--section-padding sets a padding value for sections.
Border Radius: Custom border radius values for different shapes.

  /*-=-=-=-=-=-*\
   border radius
  \*-=-=-=-=-=-*/

--radius-pill and --radius-circle define border radii for pill and circle shapes.
--blob-radius defines a more complex border radius for blob-like shapes.
Transitions: Custom transition values for animations.

can visualize blob using https://9elements.github.io/fancy-border-radius/#43.40.52.51--

  /*-=-=-=-=-=-*\
     transition
  \*-=-=-=-=-=-*/

--transition-1, --transition-2, and other cubic-bezier functions define the timing and easing of transitions.


/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\
  # PRELOADER
\*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/


// regarding .preloader .circle and why its not .preloader.circle

In HTML and CSS, the terms "descendants" and "within/inside elements" refer to the hierarchical relationship between elements in the document structure, which is often represented as a tree.

### HTML Document Structure

HTML documents are structured in a hierarchical manner, where elements can contain other elements. This relationship is often described using parent-child and ancestor-descendant terminology.

#### Example of HTML Structure

```html
<div class="parent">
  <div class="child">
    <div class="grandchild"></div>
  </div>
</div>
```

In this example:
- The `<div>` with class `parent` is the parent of the `<div>` with class `child`.
- The `<div>` with class `child` is the parent of the `<div>` with class `grandchild`.
- The `<div>` with class `grandchild` is a descendant of both the `child` and `parent` elements.

### Descendants in CSS

A descendant is any element that is nested within another element, regardless of how many levels deep.

#### CSS Descendant Selector

The descendant selector targets elements that are nested inside another element.

```css
.parent .child {
  /* Styles for .child elements that are descendants of .parent */
}
```

This selector will apply styles to any `.child` element that is a descendant of an element with the class `.parent`.

#### Example Explained

Given the HTML structure:

```html
<div class="parent">
  <div class="child">
    <div class="grandchild"></div>
  </div>
</div>
```

- **`.parent .child`**: This CSS selector targets any element with the class `child` that is a descendant of an element with the class `parent`. In this case, it matches the `<div class="child">` element because it is inside the `<div class="parent">`.

#### More Complex Descendant Example

```html
<div class="outer">
  <div class="middle">
    <div class="inner"></div>
  </div>
</div>
```

- **`.outer .inner`**: This selector targets any `.inner` element that is a descendant of an `.outer` element, no matter how deeply nested. It will match the `<div class="inner">` element.

### Compound Class Selector

A compound class selector targets elements that have multiple classes applied to them.

```css
.parent.child {
  /* Styles for elements that have both .parent and .child classes */
}
```

#### Example Explained

Given the HTML structure:

```html
<div class="parent child"></div>
```

- **`.parent.child`**: This CSS selector targets elements that have both the `parent` and `child` classes. In this case, it matches the `<div class="parent child">` element.

### Summary

- **Descendant Selector (`.parent .child`)**:
  - Targets elements with the class `child` that are nested inside elements with the class `parent`.
  - Example: `.parent .child` matches `<div class="child">` inside `<div class="parent">`.

- **Compound Class Selector (`.parent.child`)**:
  - Targets elements that have both classes `parent` and `child`.
  - Example: `.parent.child` matches `<div class="parent child">`.

### Visual Representation

Imagine the HTML structure as a tree:
- The root element is at the top.
- Parent elements have child elements nested inside them.
- Descendant elements are any elements nested within a parent, at any depth.

```html
<div class="root">
  <div class="level1">
    <div class="level2">
      <div class="level3"></div>
    </div>
  </div>
</div>
```

- **`.root .level3`**: Targets the `.level3` element because it is a descendant of `.root`.
- **`.root.level1`**: Targets an element that has both `root` and `level1` classes, which doesn't exist in the example above.

Using these selectors appropriately allows you to apply styles based on the hierarchical structure of your HTML elements.





/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\
  # HEADER
\*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/



/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\
  # HERO
\*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/


/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\
  # SERVICE
\*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/



/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\
  # SKILLS
\*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/


/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\
  # PORTFOLIO
\*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/




/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\
  # BLOG
\*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/



/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\
  # FOOTER
\*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/



/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*\
  # MEDIA QUERIES
\*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/


